#!/usr/bin/bash
# vim:set ts=3 sw=3:

set -e
shopt -s lastpipe

SELF="${0##*/}"

if [[ $(command -p id -u) != 0 ]]; then
	cat <<- END 1>&2
		$SELF must be run as root.
	END
	exit 1
fi

# try not to pollute the mount namespace
type -p unshare | read UNSHARE || :
if [[ -n $UNSHARE ]]; then
	[[ $HIDDEN != $SELF ]] && exec env HIDDEN="$SELF" "$UNSHARE" -m "$0" "$@"
fi

# pass options to kernel-install (e.g., -v)
KIOPS=()
while [[ $1 == -* ]]; do
	KIOPS+=($1)
	shift
done

# bold
function B {
	printf -- '[1m%s[22m' "$*"
}

# wrap lines
type -p fmt | read FORMAT || :
function FMT {
	if [[ -n $FORMAT ]]; then
		$FORMAT --width="${COLUMNS:-80}"
	else
		cat
	fi
}

function usage {
	cat <<- END 1>&2

		$(B USAGE): $SELF [-v] <source-filesystem> <target-filesystem>

		For example: $SELF root/0 root/1

		- The source filesystem must exist.
		- The target filesystem must not exist.
		- The target pool must exist.

	END
}
trap 'usage' err

[[ ${#*} == 2 ]]

SOURCE="$1"; zfs list -H -o name | grep -qx "$SOURCE"
TARGET="$2"; ! zfs list -H -o name | grep -qx "$TARGET"; [[ $? == 0 ]]
T_POOL="${TARGET%%/*}"; zpool list -H -o name | grep -qx "$T_POOL"

[[ ${TARGET#$T_POOL} =~ ^/.+$ ]]

function trace {
	FMT <<- END 1>&2

		$(B ERROR): An error occurred on line $1 of $SELF.

	END
}
trap 'trace ${LINENO}' err

function add_one_tenth {
	printf '%d' $(($1+$1/10))
}

df -k --output=avail /boot | grep -o '^\s*[0-9]\+' | read B_AVAIL
du -ks "/boot/$MACHINE_ID" | grep -o '^\s*[0-9]\+' | read B_NEEDED

if [[ $B_AVAIL -lt $(add_one_tenth $B_NEEDED) ]]; then
	FMT <<- END 1>&2

		$(B ERROR): There is not enough space on /boot.

	END
	exit 1
fi

zpool list -H -p -o free "$T_POOL" | read T_AVAIL
zfs list -H -p -o used "$SOURCE" | read T_NEEDED

if [[ $T_AVAIL -lt $(add_one_tenth $T_NEEDED) ]]; then
	FMT <<- END

		$(B ERROR): There is not enough space on $T_POOL.

	END
	exit 1
fi

CLEANUP=()
function cleanup {
	set +e
	while [[ ${#CLEANUP[@]} -gt 0 ]]; do
		eval ${CLEANUP[-1]} &> /dev/null
		unset CLEANUP[-1]
	done
	if [[ -d "$WORKING" ]]; then
		[[ $lock =~ ^[0-9]+$ ]] && exec {lock}<&-
		rm "$WORKING/lock"
		rmdir "$WORKING" &> /dev/null
		if [[ $? != 0 ]]; then
			mv "$WORKING" "$(mktemp -p /tmp -u ".$SELF.XXX")"
		fi
	fi
}
trap 'cleanup' exit

# try to prevent multiple copies of this command from being run concurrently
# to avoid the possibility of two os instances receiving the same machine id
WORKING="/tmp/.$SELF"
mkdir -p "$WORKING"
FLOCK="$(type -p flock)"
if [[ -n $FLOCK ]]; then
	touch "$WORKING/lock"
	exec {lock}<>"$WORKING/lock"
	if ! "$FLOCK" -n "$lock"; then
		exec {lock}<&-
		WORKING=''
		FMT <<- END 1>&2

			$(B ERROR): Another instance of $SELF appears to be running.

		END
		exit 1
	fi
fi

function prompt {
	ANSWER=''
	read -e -t 0.125 &> /dev/null || :
	local IFS=''
	while ! [[ $ANSWER =~ ^[yn]$ ]]; do
		printf "$* [y/n]: "
		read -r -n 1 ANSWER
		[[ $ANSWER != '' ]] && printf '\n'
	done
}

ESPS=()
for i in $(ls -d /boot@[a-z] 2> /dev/null); do ESPS+=("$i"); done
[[ ${#ESPS[@]} -eq 0 ]] && ESPS=('/boot')

FMT <<- END

	$(B WARNING): This script will generate a new machine id for $(B "$TARGET")
	and create new boot menu entries on $(B "${ESPS[*]}").

END
prompt "Do you wish to continue?"
[[ $ANSWER == y ]] || exit 0
echo

for esp in "${ESPS[@]}"; do
	if ! mountpoint -q "$esp" || ! [[ -d $esp/loader ]]; then
		FMT <<- END 1>&2

			$(B ERROR): $esp is not a valid ESP.

		END
		exit 1
	fi
done

zfs list -H -d 1 -o name "$SOURCE" | readarray -t FILESYSTEMS
if [[ ${#FILESYSTEMS[@]} -gt 1 ]]; then
	FMT <<- END

		$(B WARNING): $SOURCE appears to have descendant filesystems. You will
		have to copy the descendant filesystems manually if you want them trans-
		ferred. This script will only duplicate the root filesystem.

	END
	prompt "Do you want to proceed?"
	[[ $ANSWER == y ]] || exit 1
	echo
fi

mktemp -p /tmp -u ".$SELF.XXX" | read FIFO
mkfifo -m 0600 "$FIFO"
zfs list -H -o name,canmount,mountpoint > "$FIFO" &
exec {fifo}<"$FIFO"
while read -u $fifo n c m; do
	[[ $c == on ]] || continue
	[[ $m == / ]] || continue
	FMT <<- END

		$(B WARNING): $n appears to be a root filesystem (mountpoint=/) with
		its cannmount property set to on. If you want to have multiple root
		-on-zfs installations on one system, all root filesystems $(B MUST) have
		their canmount property set to noauto.

	END
	prompt "Do you want to set $(B canmount=noauto) on $(B $n) now?"
	[[ $ANSWER == y ]] && zfs set canmount=noauto "$n"
	echo
done
exec {fifo}<&-
rm "$FIFO"

function random {
	dd if=/dev/random bs=16 count=1 status=none | basenc --base16
}

read id < /etc/machine-id
[[ $id =~ ^[[:xdigit:]]{32}$ ]] || { random | read id; }

# try to keep the boot menu sorted, but fallback to random machine ids
function exists {
	[[ $1 == $(</etc/machine-id) ]] && return 0
	for i in "${ESPS[@]}"; do
		[[ -e $i/$1 ]] && return 0
	done
	return 1
}
while exists "$id"; do
	export id
	perl -M'Math::BigInt' <<- 'END' 2> /dev/null | read id && :
		$NUM = Math::BigInt->from_hex($ENV{'id'}) + 1;
		printf "%032s\n", substr($NUM->as_hex(), 2, 32);
	END
	[[ $? == 0 ]] || { random | read id; }
done
ID="${id,,}"

mktemp -p "$WORKING" -d temp.XXX | read TEMP
CLEANUP+=("rmdir '$TEMP'")

function pv {
	if type -pf pv &> /dev/null; then
		s=$(zfs list -H -p -o refer "$SOURCE")
		command -p pv -s "$(($s-$s/20))"
	else
		cat
	fi
}

zfs snapshot "$SOURCE@$ID"
CLEANUP+=("zfs destroy '$SOURCE@$ID'")
zfs send --raw "$SOURCE@$ID" | pv \
	| zfs receive -v -o canmount=noauto -o mountpoint="$TEMP" "$TARGET"
zfs destroy "$TARGET@$ID"
zfs set -u mountpoint=/ "$TARGET"
echo

cp /etc/hostid "$TEMP/etc"
systemd-firstboot --force --root="$TEMP" --machine-id="$ID" &> /dev/null

sed -i "s|root=zfs:\S\+|root=zfs:$TARGET|" "$TEMP/etc/kernel/cmdline"
FILE="$TEMP/etc/kernel/install.conf"
[[ -s $FILE ]] || echo > "$FILE"
sed -i '
	1 i layout=bls
	1 i BOOT_ROOT=/boot
	/^[#[:space:]]*layout=.*$/ d
	/^[#[:space:]]*BOOT_ROOT=.*$/ d
' "$FILE"

FILE="$TEMP/etc/kernel/install.d/91-loaderentry-update-title.install"
if ! [[ -e $FILE ]]; then
	sed 's/ \{3\}/\t/g' <<- 'END' > "$FILE"
		#!/usr/bin/sh

		set -e

		trap 'exit 0' exit

		COMMAND="${1:?}"
		KERNEL_VERSION="${2:?}"

		[ "$COMMAND" = "add" ]
		[ "$KERNEL_INSTALL_LAYOUT" = "bls" ]

		ENTRY_TOKEN="${KERNEL_INSTALL_ENTRY_TOKEN:?}"
		BOOT_ROOT="${KERNEL_INSTALL_BOOT_ROOT:?}"

		LOADER_ENTRY="$BOOT_ROOT/loader/entries/$ENTRY_TOKEN-$KERNEL_VERSION.conf"

		ROOTFS=''
		for option in $(grep '^options\s' "$LOADER_ENTRY"); do
		   ROOTFS="$(expr "$option" : 'root=zfs:\(.*\)')" && break
		done

		[ -n "$ROOTFS" ]

		sed -i -e '/^title\s/ { \| ('"$ROOTFS"')$|! s|$| ('"$ROOTFS"')|; }' \
		   "$LOADER_ENTRY"
	END
	chmod +x "$FILE"
fi

LIST="dev proc sys run"
for i in $LIST; do
	mount --rbind "/$i" "$TEMP/$i"
	mount --make-rslave "$TEMP/$i"
	CLEANUP+=("umount -R '$TEMP/$i'")
done
mount -o bind "/tmp" "$TEMP/tmp"
CLEANUP+=("umount '$TEMP/tmp'")
KVER=''
chroot "$TEMP" rpm -q --qf="%{evr}.%{arch}\n" kernel-core \
		| sort -r --version-sort | readarray -t KCORES
for kc in "${KCORES[@]}"; do
	if
		chroot "$TEMP" readlink -e "/usr/lib/modules/$kc/build" &> /dev/null
	then
		KVER="$kc"
		break
	fi
done
if [[ -z $KVER ]]; then
	FMT <<- END
		$(B ERROR): No kernel found on $TARGET that is linked to a compatible
		installation of kernel-devel. Cannot generate a working kernel+initramfs
		to boot $TARGET.
	END
	exit 1
fi
for esp in "${ESPS[@]}"; do
	mount -o bind "$esp" "$TEMP/boot"
	CLEANUP+=("umount '$TEMP/boot'")

	FMT <<- END
		Creating a new boot menu entry and initramfs image on $esp ...
	END
	chroot "$TEMP" \
		kernel-install "${KIOPS[@]}" add "$KVER" "/lib/modules/$KVER/vmlinuz"
	findmnt -n -f -o 'partlabel' "$esp" | read LABEL || :
	if [[ $LABEL =~ ^boot@[a-z]$ ]]; then
		FILE="$TEMP/etc/fstab"
		printf -v LINE -- '%s' \
			"PARTLABEL=$LABEL " \
			"/$LABEL " \
			"vfat " \
			"dmask=0077,fmask=0177," \
			"context=system_u:object_r:boot_t:s0," \
			"x-systemd.before=bootbind.service," \
			"shortname=lower," \
			"flush," \
			"discard," \
			"nofail " \
			"0 0"
		if [[ -s $FILE ]]; then
			sed -i '
				1 i '"$LINE"'
				/\s\/'"$LABEL"'\s/ d
			' "$FILE"
		else
			printf "$LINE\n" > "$FILE"
		fi
		mkdir -p "$TEMP/$LABEL"
	fi
	FILE="$TEMP/boot/loader/loader.conf"
	[[ -s $FILE ]] || echo > "$FILE"
	sed -i '
		1 i timeout 10
		/^[#[:space:]]*timeout\s.*$/ d
	' "$FILE"
	printf 'Entry created. Reboot to select and use %s.\n\n' "$(B $(
		sed -n "s|^title\s*\(.*\)|\1| p" $TEMP/boot/loader/entries/$ID-*.conf
	))"

	umount "$TEMP/boot"
	unset CLEANUP[-1]
done

LI='/sys/firmware/efi/efivars/LoaderInfo-4a67b082-0a4c-41cf-b6c7-440b29bb8c4f'
if ! [[ -e $LI ]] || ! tr -d '\0' < "$LI" | grep -q 'systemd-boot'; then
	exit 0
fi

prompt "Set $(B $TARGET) as the default systemd-boot menu option?"
if [[ $ANSWER == y ]]; then
	for esp in "${ESPS[@]}"; do
		FILE="$esp/loader/loader.conf"
		[[ -s $FILE ]] || echo > "$FILE"
		sed -i '
			1 i default '"$ID"'-*
			/^[#[:space:]]*default\s.*$/ d
		' "$FILE"
	done
	FMT <<- END
		The default boot menu entry is now $TARGET.

	END
fi
